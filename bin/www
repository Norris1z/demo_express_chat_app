#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatapp1:server');
var http = require('http');
var Chat = require('../models/chat');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */
var connectedUsers = new Map();
var connectedIDs = new Map();

var server = http.createServer(app);


var socket = require('socket.io')(server);

socket.on('connection',function(sock){
  sock.emit('auth');
  sock.on('credentials',(data)=>{
    connectedUsers.set(data._id,sock.id);
    connectedIDs.set(sock.id,data._id);
  });
  sock.on('send_chat',(chat)=>{
    let newMsg = new Chat({
      sender: chat.sender,
      recipient: chat.recipient,
      message: chat.message
    });
    newMsg.save();
    sock.broadcast.to(connectedUsers.get(chat.recipient)).emit('chat_recieved',chat);
  })
  sock.on('disconnect',()=>{
    let socket_id = sock.id;
    connectedUsers.delete(socket_id);
    connectedIDs.delete(socket_id);
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}